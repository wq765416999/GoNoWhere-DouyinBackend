// Code generated by goctl. DO NOT EDIT.

package videos

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	videosFieldNames          = builder.RawFieldNames(&Videos{})
	videosRows                = strings.Join(videosFieldNames, ",")
	videosRowsExpectAutoSet   = strings.Join(stringx.Remove(videosFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	videosRowsWithPlaceHolder = strings.Join(stringx.Remove(videosFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	videosModel interface {
		Insert(ctx context.Context, data *Videos) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Videos, error)
		FindOneByVideoId(ctx context.Context, videoId int64) (*Videos, error)
		Update(ctx context.Context, data *Videos) error
		Delete(ctx context.Context, id int64) error
	}

	defaultVideosModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Videos struct {
		Id            int64        `db:"id"` // 自增主键
		CreateAt      time.Time    `db:"create_at"`
		DeletedAt     sql.NullTime `db:"deleted_at"`
		VideoId       int64        `db:"video_id"`
		AuthorId      int64        `db:"author_id"`
		FavoriteCount int64        `db:"favorite_count"`
		CommentCount  int64        `db:"comment_count"`
		PlayUrl       string       `db:"play_url"`
		CoverUrl      string       `db:"cover_url"`
	}
)

func newVideosModel(conn sqlx.SqlConn) *defaultVideosModel {
	return &defaultVideosModel{
		conn:  conn,
		table: "`videos`",
	}
}

func (m *defaultVideosModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultVideosModel) FindOne(ctx context.Context, id int64) (*Videos, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", videosRows, m.table)
	var resp Videos
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultVideosModel) FindOneByVideoId(ctx context.Context, videoId int64) (*Videos, error) {
	var resp Videos
	query := fmt.Sprintf("select %s from %s where `video_id` = ? limit 1", videosRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, videoId)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultVideosModel) Insert(ctx context.Context, data *Videos) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, videosRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.DeletedAt, data.VideoId, data.AuthorId, data.FavoriteCount, data.CommentCount, data.PlayUrl, data.CoverUrl)
	return ret, err
}

func (m *defaultVideosModel) Update(ctx context.Context, newData *Videos) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, videosRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.DeletedAt, newData.VideoId, newData.AuthorId, newData.FavoriteCount, newData.CommentCount, newData.PlayUrl, newData.CoverUrl, newData.Id)
	return err
}

func (m *defaultVideosModel) tableName() string {
	return m.table
}
