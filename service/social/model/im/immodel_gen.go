// Code generated by goctl. DO NOT EDIT.

package im

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	imFieldNames          = builder.RawFieldNames(&Im{})
	imRows                = strings.Join(imFieldNames, ",")
	imRowsExpectAutoSet   = strings.Join(stringx.Remove(imFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	imRowsWithPlaceHolder = strings.Join(stringx.Remove(imFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	imModel interface {
		Insert(ctx context.Context, data *Im) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Im, error)
		Update(ctx context.Context, data *Im) error
		Delete(ctx context.Context, id int64) error
	}

	defaultImModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Im struct {
		Id       int64          `db:"id"` // 自增主键
		Uid      sql.NullInt64  `db:"uid"`
		Touid    sql.NullInt64  `db:"touid"`
		Message  sql.NullString `db:"message"`
		CreateAt sql.NullTime   `db:"create_at"`
	}
)

func newImModel(conn sqlx.SqlConn) *defaultImModel {
	return &defaultImModel{
		conn:  conn,
		table: "`im`",
	}
}

func (m *defaultImModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultImModel) FindOne(ctx context.Context, id int64) (*Im, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", imRows, m.table)
	var resp Im
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultImModel) Insert(ctx context.Context, data *Im) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, imRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Uid, data.Touid, data.Message)
	return ret, err
}

func (m *defaultImModel) Update(ctx context.Context, data *Im) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, imRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Uid, data.Touid, data.Message, data.Id)
	return err
}

func (m *defaultImModel) tableName() string {
	return m.table
}
